import org.apache.tools.ant.filters.ReplaceTokens

plugins {
	id 'application'
	id 'org.springframework.boot' version "${springBootVersion}"
	// https://mvnrepository.com/artifact/io.freefair.lombok/io.freefair.lombok.gradle.plugin
	id "io.freefair.lombok" version "${ioFreeFairLombok}"
	id "jacoco"
}

group = 'fi.poltsi.vempain'
version = project.hasProperty("releaseVersion") ? project.releaseVersion : '0.0.1-SNAPSHOT'

bootJar {
	archiveFileName = "${rootProject.name}-${version}.jar"
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of("${javaVersion}")
	}
}

repositories {
	mavenCentral()
	maven {
		url = "https://maven.pkg.github.com/Vempain/vempain-auth"
		credentials {
			username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
			password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
		}
	}
	maven { url = 'https://repo.spring.io/milestone' }
	maven { url = "https://mvn.0110.be/releases" }
}

dependencies {
	annotationProcessor group: 'org.springframework.boot', name: 'spring-boot-configuration-processor', version: "${springBootVersion}"
	implementation project(':api')
	// This needs to be built first in vempain-auth
	implementation "fi.poltsi.vempain:vempain-auth-core:${vempainAuthVersion}"
	implementation "fi.poltsi.vempain:vempain-auth-api:${vempainAuthVersion}"
	implementation group: 'org.springframework.boot', name: 'spring-boot', version: "${springBootVersion}"
	implementation "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
	implementation "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-validation', version: "${springBootVersion}"
	implementation group: 'org.springframework.boot', name: 'spring-boot-starter-jdbc', version: "${springBootVersion}"
	implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
	implementation group: 'io.jsonwebtoken', name: 'jjwt-api', version: "${jjwtVersion}"
	implementation group: 'com.fasterxml.jackson.datatype', name: 'jackson-datatype-jsr310', version: "${jacksonVersion}"
	implementation group: 'org.flywaydb', name: 'flyway-core', version: "${flywayVersion}"
	implementation "io.micrometer:micrometer-registry-prometheus:${micrometerVersion}"
	implementation "io.micrometer:micrometer-registry-elastic:${micrometerVersion}"
	// https://mvnrepository.com/artifact/org.apache.commons/commons-text
	implementation group: 'org.apache.commons', name: 'commons-text', version: '1.14.0'
	// https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-starter-webmvc-ui
	implementation group: 'org.springdoc', name: 'springdoc-openapi-starter-webmvc-ui', version: '2.8.10'
	// https://mvnrepository.com/artifact/org.hibernate.orm/hibernate-core
	implementation group: 'org.hibernate.orm', name: 'hibernate-core', version: '6.6.26.Final'
	// https://mvnrepository.com/artifact/org.postgresql/postgresql
	implementation group: 'org.postgresql', name: 'postgresql', version: '42.7.7'
	// https://mvnrepository.com/artifact/org.json/json
	implementation group: 'org.json', name: 'json', version: '20250517'
	// https://mvnrepository.com/artifact/net.coobird/thumbnailator
	implementation group: 'net.coobird', name: 'thumbnailator', version: '0.4.20'
	// https://mvnrepository.com/artifact/com.github.mwiede/jsch
	implementation group: 'com.github.mwiede', name: 'jsch', version: '2.27.3'
	// https://mvnrepository.com/artifact/jakarta.xml.bind/jakarta.xml.bind-api
	implementation group: 'jakarta.xml.bind', name: 'jakarta.xml.bind-api', version: '4.0.2'
	// https://mvnrepository.com/artifact/jakarta.annotation/jakarta.annotation-api
	implementation group: 'jakarta.annotation', name: 'jakarta.annotation-api', version: '3.0.0'
	// https://mvnrepository.com/artifact/com.github.spotbugs/spotbugs-annotations
	implementation group: 'com.github.spotbugs', name: 'spotbugs-annotations', version: '4.9.4'
	// https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
	implementation group: 'org.apache.commons', name: 'commons-lang3', version: '3.18.0'
	// https://mvnrepository.com/artifact/commons-codec/commons-codec
	implementation group: 'commons-codec', name: 'commons-codec', version: '1.19.0'
	runtimeOnly "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
	runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"
	runtimeOnly group: 'org.flywaydb', name: 'flyway-database-postgresql', version: "${flywayVersion}"
	testImplementation group: 'org.springframework.boot', name: 'spring-boot-starter-test', version: "${springBootVersion}"
	testImplementation group: 'org.testcontainers', name: 'junit-jupiter', version: "${testContainersVersion}"
	testImplementation group: 'org.testcontainers', name: 'postgresql', version: "${testContainersVersion}"
	// https://mvnrepository.com/artifact/org.mockito/mockito-junit-jupiter
	testImplementation group: 'org.mockito', name: 'mockito-junit-jupiter', version: '5.19.0'
	// https://mvnrepository.com/artifact/org.springframework.security/spring-security-test
	testImplementation group: 'org.springframework.security', name: 'spring-security-test', version: '6.5.3'
}

application {
	// Define the main class for the application.
	mainClass = 'fi.poltsi.vempain.VempainAdminApplication'
}

compileJava.inputs.files(processResources)

jacoco {
	toolVersion = "0.8.13"
}

tasks.named('test') {
	useJUnitPlatform()
}

test {
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
	}
}

processResources {
	// capture once at configuration time (CC-safe)
	def ver = version.toString()
	// declare as input for configuration cache
	inputs.property("projectVersion", ver)

	filesMatching("**/application.yaml") {
		filteringCharset = "UTF-8"
		filter(ReplaceTokens,
				tokens: [projectVersion: ver]
		)
	}
}
