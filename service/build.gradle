import org.apache.tools.ant.filters.ReplaceTokens

plugins {
	id 'application'
	id 'org.springframework.boot' version "${springBootVersion}"
	// https://mvnrepository.com/artifact/io.freefair.lombok/io.freefair.lombok.gradle.plugin
	id "io.freefair.lombok" version "${ioFreeFairLombok}"
	id "jacoco"
}

group = 'fi.poltsi.vempain'
version = project.hasProperty("releaseVersion") ? project.releaseVersion : '0.0.1-SNAPSHOT'

bootJar {
	archiveFileName = "${rootProject.name}-${version}.jar"
}

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of("${javaVersion}")
	}
}

repositories {
	mavenCentral()
	maven {
		url = "https://maven.pkg.github.com/Vempain/vempain-auth"
		credentials {
			username = project.findProperty("gpr.user") ?: System.getenv("GITHUB_ACTOR")
			password = project.findProperty("gpr.key") ?: System.getenv("GITHUB_TOKEN")
		}
	}
	maven { url = 'https://repo.spring.io/milestone' }
	maven { url = "https://mvn.0110.be/releases" }
}

dependencies {
	annotationProcessor "org.springframework.boot:spring-boot-configuration-processor:${springBootVersion}"
	implementation project(':api')
	// This needs to be built first in vempain-auth
	implementation "fi.poltsi.vempain:vempain-auth-core:${vempainAuthVersion}"
	implementation "fi.poltsi.vempain:vempain-auth-api:${vempainAuthVersion}"
	implementation "org.springframework.boot:spring-boot:${springBootVersion}"
	implementation "org.springframework.boot:spring-boot-starter-security:${springBootVersion}"
	implementation "org.springframework.boot:spring-boot-starter-actuator:${springBootVersion}"
	implementation "org.springframework.boot:spring-boot-starter-validation:${springBootVersion}"
	implementation "org.springframework.boot:spring-boot-starter-jdbc:${springBootVersion}"
	implementation "org.springframework.boot:spring-boot-starter-data-jpa:${springBootVersion}"
	implementation "io.jsonwebtoken:jjwt-api:${jjwtVersion}"
	implementation "com.fasterxml.jackson.datatype:jackson-datatype-jsr310:${jacksonVersion}"
	implementation "org.flywaydb:flyway-core:${flywayVersion}"
	implementation "io.micrometer:micrometer-registry-prometheus:${micrometerVersion}"
	implementation "io.micrometer:micrometer-registry-elastic:${micrometerVersion}"
	// https://mvnrepository.com/artifact/org.apache.commons/commons-text
	implementation "org.apache.commons:commons-text:1.14.0"
	// https://mvnrepository.com/artifact/org.springdoc/springdoc-openapi-starter-webmvc-ui
	implementation "org.springdoc:springdoc-openapi-starter-webmvc-ui:2.8.13"
	// https://mvnrepository.com/artifact/org.hibernate.orm/hibernate-core
	implementation "org.hibernate.orm:hibernate-core:6.6.26.Final"
	// https://mvnrepository.com/artifact/org.postgresql/postgresql
	runtimeOnly "org.postgresql:postgresql:42.7.8"
	// https://mvnrepository.com/artifact/org.json/json
	implementation "org.json:json:20250517"
	// https://mvnrepository.com/artifact/net.coobird/thumbnailator
	implementation "net.coobird:thumbnailator:0.4.21"
	// https://mvnrepository.com/artifact/com.github.mwiede/jsch
	implementation "com.github.mwiede:jsch:2.27.3"
	// https://mvnrepository.com/artifact/jakarta.xml.bind/jakarta.xml.bind-api
	implementation "jakarta.xml.bind:jakarta.xml.bind-api:4.0.4"
	// https://mvnrepository.com/artifact/jakarta.annotation/jakarta.annotation-api
	implementation "jakarta.annotation:jakarta.annotation-api:3.0.0"
	// https://mvnrepository.com/artifact/com.github.spotbugs/spotbugs-annotations
	implementation "com.github.spotbugs:spotbugs-annotations:4.9.4"
	// https://mvnrepository.com/artifact/org.apache.commons/commons-lang3
	implementation "org.apache.commons:commons-lang3:3.18.0"
	// https://mvnrepository.com/artifact/commons-codec/commons-codec
	implementation "commons-codec:commons-codec:1.19.0"
	runtimeOnly "io.jsonwebtoken:jjwt-impl:${jjwtVersion}"
	runtimeOnly "io.jsonwebtoken:jjwt-jackson:${jjwtVersion}"
	runtimeOnly "org.flywaydb:flyway-database-postgresql:${flywayVersion}"
	testImplementation "org.springframework.boot:spring-boot-starter-test:${springBootVersion}"
	testImplementation "org.testcontainers:junit-jupiter:${testContainersVersion}"
	testImplementation "org.testcontainers:postgresql:${testContainersVersion}"
	// https://mvnrepository.com/artifact/org.mockito/mockito-junit-jupiter
	testImplementation "org.mockito:mockito-junit-jupiter:5.20.0"
	// https://mvnrepository.com/artifact/org.springframework.security/spring-security-test
	testImplementation "org.springframework.security:spring-security-test:6.5.6"
}

application {
	// Define the main class for the application.
	mainClass = 'fi.poltsi.vempain.VempainAdminApplication'
}

compileJava.inputs.files(processResources)

jacoco {
	toolVersion = "0.8.13"
}

tasks.named('test') {
	useJUnitPlatform()
}

test {
	finalizedBy jacocoTestReport
}

jacocoTestReport {
	dependsOn test
	reports {
		xml.required = true
	}
}

processResources {
	// capture once at configuration time (CC-safe)
	def ver = version.toString()
	// declare as input for configuration cache
	inputs.property("projectVersion", ver)

	filesMatching("**/application.yaml") {
		filteringCharset = "UTF-8"
		filter(ReplaceTokens,
				tokens: [projectVersion: ver]
		)
	}
}
